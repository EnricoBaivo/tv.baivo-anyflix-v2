[project]
name = "anime-backend"
version = "0.1.0"
description = "Python backend service for anime streaming sources (AniWorld & SerienStream)"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Anime Backend Team" }
]
keywords = ["anime", "streaming", "fastapi", "webscraping"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "aiofiles>=24.1.0",
    "aiohttp>=3.12.15",
    "beautifulsoup4>=4.13.5",
    "fastapi[standard]>=0.116.1",
    "httpx>=0.28.1",
    "lxml>=6.0.1",
    "pydantic>=2.11.7",
    "python-dateutil>=2.9.0.post0",
    "python-multipart>=0.0.20",
    "pydantic-settings>=2.0.0",
    "regex>=2025.9.1",
    "uvicorn[standard]>=0.35.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "js2py>=0.74",
    "cryptography>=45.0.7",
    "cloudscraper>=1.2.71",
    "jsbeautifier>=1.15.4",
    "html5lib>=1.1",
    "yt-dlp>=2025.9.5",
    "pytest-cov>=6.3.0",
    "cachetools>=5.5.0",
    "aiocache[memcached,redis]>=0.12.3",
    "black>=25.1.0",
    "mypy>=1.13.0",
    "ruff>=0.8.0",
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=app",
    "--cov=lib",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]
pythonpath = ["src", "app", "lib"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src", "app", "lib"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lib", "app"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

# Pydantic plugin for better model checking
plugins = ["pydantic.mypy"]

# Module-specific settings
[[tool.mypy.overrides]]
module = [
    "js2py.*",
    "cloudscraper.*",
    "jsbeautifier.*",
    "yt_dlp.*",
    "aiocache.*",
    "cachetools.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ANN", # flake8-annotations
    "S",   # bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "G",   # flake8-logging-format
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]

ignore = [
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "S101",   # Use of assert
    "T201",   # Print found
    "COM812", # Trailing comma missing (conflicts with black)
    "ISC001", # Implicitly concatenated string literals (conflicts with black)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ANN", "ARG"]
"demo_*.py" = ["T201", "ANN"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

[project.scripts]
lint = "bash lint.sh"
